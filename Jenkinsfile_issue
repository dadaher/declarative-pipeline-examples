pipeline {
    agent any
    environment {
        GITHUB_TOKEN = credentials('fine-grained-token')
    }
    stages {
        stage('Push try 1') {
            steps {
                echo 'This is an example stage.'
                // Replace this with your actual build steps
script{
withCredentials([string(credentialsId: ' JenkinsChecksNotifyApp', variable: 'GITHUB_APP_TOKEN')]) {
 sh '''
curl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer ${GITHUB_APP_TOKEN}" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/dadaher/declarative-pipeline-examples/issues \
  -d '{"title":"Found a bug2","body":"Im having a problem with this.","assignees":["dadaher"],"labels":["bug"]}'
'''
}

}
            }
        }
        stage('Push issue try 2') {
            steps {
                echo 'This is an example stage.'
                // Replace this with your actual build steps
  echo "Bearer ${GITHUB_TOKEN}"
 sh '''
curl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer ${GITHUB_TOKEN_PSW}" \
  https://api.github.com/repos/dadaher/declarative-pipeline-examples/issues \
  -d '{"title":"Found a bug3","body":"Im having a problem with this.","assignees":["dadaher"],"labels":["bug"]}'
'''
            }
        }
    }
    post {
        success {
            script {
                // Define the details of the issue to be created
                def issueDetails = [
                    title: "Build Successful",
                    body: "The build for ${env.BUILD_ID} completed successfully.",
                    labels: ["build", "success"]
                ]

                // Construct the URL for creating an issue in the GitHub repository
                def apiUrl = "https://api.github.com/repos/dadaher/declarative-pipeline-examples/issues"

                // Use the 'sh' step to execute a shell command that makes a POST request to the GitHub API

            }
        }
    }
}
